v1.5.4

new:
- Todo's states expanded and up to grow more
- Added 'Cancel' and 'Progress' states for '!' and '=' prefixes respectively
- Triggering to 'Cancel' state also wipes todo from code, as 'Close' do
- Added SetState command; It duplicates changing states by entering symbol, and mostly added for those who dont want to remember prefixes
- Added <alt+d> binding to SetState command

issues:
- External DB states will now be 'Open' and 'Close' with newly created id's, and state name migration is done at first access to every one project by saving all tasks with +1 version and refering to new id_state. Old names ('True' and 'False') are remained with their id's. So if you're using SQL db, you may want to check id_state reassignment for all tasks within project.


v1.5.3

new:
- middle-line todo; '#todo:' can be inserted anywhere, making remaining part of string a saved comment

fix:
- aggressive HTTP flushing removed; it is only done at start and at exit of last ST window
- detected limit for count of tasks synchronised (about 200); fixed
- better comparison for most up-to-date corresponding multidb todo at db.fetch()
- removed back 60sec gap while comparing multidb todo's, due to saving stamps from same time value


v1.5.2

crash fix:
- HTTP newId() was returning wrong value


v1.5.1

fix:
- updated changelog, merely


v1.5.0

new:
- Multiple DB allowed. Task will be saved to all specified DB's at one time.
- 'File' mode DB is always on and dont have any explicit settings.
- Specified DB's are synchronized at ST start and at flush points.

change:
- 'Transfer' command is obsolete and removed, due to ability to set multiple synchronized DB's.

fix:
- HTTP is now fetched/synchronized.

issue:
- At the moment only one external DB (in addition fo 'File') is allowed; It is defined by last config string, as before. Removing this limitation is low-priority, tho all code preparations are done.
- Synchronizing only last version of each task is desired behaviour from now.


v1.4.0

new:
- HTTP engine introduced and become default. http://typetodo.com is used as default server
- HTTP anonymous and registered repositories are supported
- added command to open current project's HTTP repository in browser, if any
- added command to open current project's and global .do config files
- added command to reset global .do config to default.
  That will be HTTP with new public repository.
  Existing global tasks will attempt to move to that new repository
- added command to reset project's .do config.
  New database settings will be copied from global .do,
  and project's tasks will attempt to move to new location.
  
changes:
- verbose and dialog messages changed

fix:
- Strange code preventing SQL table creation is changed to working one.

known issues:
- Global reset and project's transfer will NOT work if original database is HTTP.
  Only File or SQL are supported as source yet.
  Also if transfering from SQL, ONLY LAST task's version will be copied.
- Synchronysing changes from database is still not working. It is the issue of next version.
  Also http://typetodo.com doesn't have any 'modify' tools yet. Be patient.
  

v1.3.1

fixes:
- all changes are flushed at exit (and at changing window)
- as flush-at-exit fixed, flushing delay raised to 5 sec's


v1.3.0

new:
- internal: TodoTask are managed now from TodoDb. Step toward buffered flush and consistency check.
- buffered flush introduced; all changes are flushed after 2 seconds of idle
- as a result of buffered flush, SQL stores full history of TODO changes. No SQL table definitions affected.

fixes:
- idented doplets doesnt seems to be saved as edited; Now they do

known issues:
- (fixed in v1.3.1) changes flushed in 2 seconds of idle, so they will be lost if ST is exited in that time.


v1.2.6

- fixed bug with creating .do for blank projects
- fixed bug with undoing done (+) doplets
- .todo files renamed to .do
- .do color markup added
- bugfixes


v1.2.0

- ST3 supported


v1.1.0

- MySQL support added


v1.0.0
- basic #todo recognising and editing
- .todo database
